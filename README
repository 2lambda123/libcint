libcint
=======

version 1.1
2013-05-29


What is libcint
---------------

libcint is an open source library for computation of Gaussian type
integrals.  It provides C/Fortran function to evaluate one-electron /
two-electron integrals with Cartesian / real-spheric / spinor Gaussian type
functions.


Features
--------

* one electron integrals
    - nuclear attraction due to Gaussian nuclear model
* two electron integrals
    - Coulomb repulsion
    - Gaunt interaction
* Cartesian GTO:  6d, 10f, 15g Gaussian type functions
* real-spheric GTO:  5d, 7f, 9g Gaussian type functions
* spinor GTO:  J-adapted spinor Gaussian functions
* common lisp script to generate C code
* thread safe


Getting libcint
---------------

The newest version is available from:

    git clone http://github.com/sunqm/libcint.git


Generating integrals
--------------------

If clisp was installed in the system, new integrals can be automatically
implemented.  You can add entries in script/auto_intor.cl and generate
code by

    cd script; clisp auto_intor.cl; mv *.c ../src/autocode/

New entries should follow the format of those existed entries.
In one entry, you need to define the function name and the expression of
the integral.  The expression is consistent with Mulliken notation.
For one-electron integral, an entry can be

    '("integral_name" (number op-bra op-bra ... \| op-ket ...))
or
    '("integral_name" (number op-bra op-bra ... \| 1e-operator \| op-ket ...))

the entry of two-electron integral can be

    '("integral_name" (number op-bra-electron-1 ... \, op-ket-electron-1 ... \|
                              op-bra-electron-2 ... \, op-ket-electron-2 ... ))
or
    '("integral_name" (number op-bra-electron-1 ... \, op-ket-electron-1 ... \|
                       gaunt \| op-bra-electron-2 ... \, op-ket-electron-2 ... ))

* Parentheses should be paired.
* Line break is allowed
* Note the _backslash_ in \| and \,
* "integral_name" is the function name.  Valid name can be made up of
  letters, digits and underscore ("_").
* number can be an integer, a real number or a pure imaginary number. An
  imaginary number should be written as
    #C(0 XXX)
* Supported operator-bra and operator-ket include
    p     means    -i \nabla
    ip    means    \nabla
    r0    means    \vec{r} - (0,0,0)
    rc    means    \vec{r} - \vec{R}_(env[PTR_COMMON_ORIG])
    ri    means    \vec{r} - \vec{R}_i
    rj    means    \vec{r} - \vec{R}_j
    rk    means    \vec{r} - \vec{R}_k
    rl    means    \vec{r} - \vec{R}_l
    r              can be ri/rj/rk/rl; associate with the basis it operates
    g     means    i/2 (\vec{R}_{bra} - \vec{R}_{ket}) \times \vec{r}
    sigma means    three pauli matrix
    dot, cross     can be used to combine operator-bra or operator-ket
* Supported 1e-operator and 2e-operator include
    rinv        means   1 / |\vec{r} - \vec{R}_(env[PTR_COMMON_ORIG])|
    nuc         means   \sum_N Z_N / |\vec{r} - \vec{R}_N|
    nabla-rinv  means   \nabla (1 / |\vec{r} - \vec{R}_(env[PTR_COMMON_ORIG])|)
    gaunt       means   \alpha_i \dot \alpha_j / |\vec{r}_i - \vec{r}_j|



Installation
------------

* Prerequisites
    - BLAS library
    - Python version 2.5 or higher (optional, for make check)
    - clisp / SBCL (optional, for common lisp script)

* Build libcint
    mkdir build; cd build
    ../configure <options>
    make
    make check  # optional
    make install

* Use Intel MKL as BLAS library
    - MKL version 10.2 or older or CPU without Intel AVX support
      ../configure --with-blas="-Wl,--start-group -L$MKLROOT/lib/intel64 \
          -lmkl_intel_lp64 -lmkl_sequential -lmkl_core \
          -Wl,--end-group -lpthread"
    - MKL version 10.3 or newer and CPU with Intel AVX support
      ../configure --with-blas="-Wl,--start-group -L$MKLROOT/lib/intel64 \
          -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_avx \
          -Wl,--end-group -lpthread"
    - Link flags of other MKL version refers to the online MKL link advisor
      http://software.intel.com/sites/products/mkl/


Known bugs
----------

* On 64-bit system, "make check" stop with error:

    MKL FATAL ERROR: Cannot load libmkl_def.so

  This problem is caused by the conflict between Python and MKL library.
  Add -lmkl_mc -lmkl_def to MKL link flags to replace the default blas
  link flags.  Be *careful* with the order of -lmkl_mc and -lmkl_def.
  e.g.
    ../configure --with-blas="-Wl,--start-group -L$MKLROOT/lib/intel64 \
        -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_mc -lmkl_def \
        -Wl,--end-group -lpthread"

* "make check" may fail in the following tests
    - cint2e_sph
    - cint2e_ig1_sph
    - cint2e
    - cint2e_sa10sp1
    - cint2e_sa10sp1spsp2
    - cint2e_spgsp1
    - cint2e_g1spsp2
    - cint2e_spgsp1spsp2


Bug report
----------
Qiming Sun <osirpt.sun@gmail.com>
